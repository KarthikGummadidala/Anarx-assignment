# -*- coding: utf-8 -*-
"""Anarx_Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VqtLqSGBzYii1hsi7LKHQGHSJW2psjsM
"""

pip install openai langchain pandas lxml

import pandas as pd

# Replace with your actual Excel file paths
xlsx_files = ['/content/drive/MyDrive/Product-Level Eligibility Table (mapped).xlsx', '/content/drive/MyDrive/Product-Level Total Sales and Metrics (mapped).xlsx']

# Read the files into separate DataFrames
df1 = pd.read_excel(xlsx_files[0], engine='openpyxl')
df2 = pd.read_excel(xlsx_files[1], engine='openpyxl')


# Optional: Print preview
print("Sheet 1:\n", df1.head())
print("Sheet 2:\n", df2.head())

from langchain_experimental.agents import create_pandas_dataframe_agent
from langchain.llms import OpenAI

# Load your OpenAI key
import os
os.environ["OPENAI_API_KEY"] = "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"  # Replace with your key

# Use GPT-4 or GPT-3.5
llm = OpenAI(temperature=0, model="gpt-3.5-turbo")  # or "gpt-3.5-turbo"

# Create agents for each sheet
agent1 = create_pandas_dataframe_agent(llm, df1, verbose=True, allow_dangerous_code=True)
agent2 = create_pandas_dataframe_agent(llm, df2, verbose=True, allow_dangerous_code=True)

import pandas as pd
import google.generativeai as genai

# Step 1: Load the Excel files into Pandas DataFrames
ad_sales = pd.read_excel("/content/drive/MyDrive/Product-Level Ad Sales and Metrics (mapped).xlsx")
total_sales = pd.read_excel("/content/drive/MyDrive/Product-Level Total Sales and Metrics (mapped).xlsx")
eligibility = pd.read_excel("/content/drive/MyDrive/Product-Level Eligibility Table (mapped).xlsx")

# Step 2: Set up Gemini
# Replace with your Gemini key. It's recommended to use Colab Secrets for API keys.
genai.configure(api_key="AIzaSyBLRJR-gKeKNz_Nj7BxXK_4BatrGpawfKs")
# Use a model that is available and supports generateContent
model = genai.GenerativeModel("gemini-1.5-flash-latest")

# Step 3: Use the LLM to generate Python code
def question_to_code(question):
    prompt = f"""
You are a Python data expert. You have the following Pandas DataFrames already loaded:

- ad_sales
- total_sales
- eligibility

Write clean Python code to answer this question:

Question: "{question}"

Print the final result. Don't define the DataFrames, they are already defined.
Return only code, not explanations.
"""
    response = model.generate_content(prompt)
    return response.text.strip()

# Step 4: Execute the code
def execute_code(code):
    local_vars = {"ad_sales": ad_sales, "total_sales": total_sales, "eligibility": eligibility}
    try:
        exec(code, globals(), local_vars)
    except Exception as e:
        return f"Error executing code: {e}"
    return "‚úÖ Code executed successfully (Check printed output)"

# Step 5: Full AI Agent
def ai_agent(question):
    code = question_to_code(question)
    print("üîç Generated Code:\n", code)
    result = execute_code(code)
    return result

!pip install langchain_experimental

# Example Questions
if __name__ == "__main__":
    question = "Calculate the RoAS (Return on Ad Spend)"
    print("ü§ñ AI Agent Answering:\n")
    ai_agent(question)